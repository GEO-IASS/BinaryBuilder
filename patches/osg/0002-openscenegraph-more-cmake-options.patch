diff -ruN OpenSceneGraph-2.8.5/CMakeLists.txt OpenSceneGraph-2.8.5_mod/CMakeLists.txt
--- OpenSceneGraph-2.8.5/CMakeLists.txt	2012-08-29 14:00:56.000000000 -0700
+++ OpenSceneGraph-2.8.5_mod/CMakeLists.txt	2012-08-29 14:07:29.000000000 -0700
@@ -283,7 +283,7 @@
                "${OPENSCENEGRAPH_CONFIG_HEADER}")
 # INSTALL_FILES(/include/osg/ FILES "${OPENSCENEGRAPH_CONFIG_HEADER}")
 
-
+INCLUDE(MacroOptionalFindPackage)
 ################################################################################
 # Optional build components
 
@@ -300,24 +300,24 @@
 ENDIF(WIN32)
 
 # Common to all platforms:
-FIND_PACKAGE(FreeType)
-FIND_PACKAGE(Inventor)
-FIND_PACKAGE(Jasper)
-FIND_PACKAGE(OpenEXR)
-FIND_PACKAGE(COLLADA)
-FIND_PACKAGE(FBX)
-FIND_PACKAGE(ZLIB)
-FIND_PACKAGE(Xine)
-FIND_PACKAGE(OpenVRML)
-FIND_PACKAGE(Performer)
-FIND_PACKAGE(GDAL)
-FIND_PACKAGE(CURL)
-FIND_PACKAGE(ITK)
-FIND_PACKAGE(LibVNCServer)
-FIND_PACKAGE(OurDCMTK)
-FIND_PACKAGE(OpenAL)
-FIND_PACKAGE(XUL)
-FIND_PACKAGE(FFmpeg)
+MACRO_OPTIONAL_FIND_PACKAGE(FreeType)
+MACRO_OPTIONAL_FIND_PACKAGE(Inventor)
+MACRO_OPTIONAL_FIND_PACKAGE(Jasper)
+MACRO_OPTIONAL_FIND_PACKAGE(OpenEXR)
+MACRO_OPTIONAL_FIND_PACKAGE(COLLADA)
+MACRO_OPTIONAL_FIND_PACKAGE(FBX)
+MACRO_OPTIONAL_FIND_PACKAGE(ZLIB)
+MACRO_OPTIONAL_FIND_PACKAGE(Xine)
+MACRO_OPTIONAL_FIND_PACKAGE(OpenVRML)
+MACRO_OPTIONAL_FIND_PACKAGE(Performer)
+MACRO_OPTIONAL_FIND_PACKAGE(GDAL)
+MACRO_OPTIONAL_FIND_PACKAGE(CURL)
+MACRO_OPTIONAL_FIND_PACKAGE(ITK)
+MACRO_OPTIONAL_FIND_PACKAGE(LibVNCServer)
+MACRO_OPTIONAL_FIND_PACKAGE(OurDCMTK)
+MACRO_OPTIONAL_FIND_PACKAGE(OpenAL)
+MACRO_OPTIONAL_FIND_PACKAGE(XUL)
+MACRO_OPTIONAL_FIND_PACKAGE(FFmpeg)
 
 # Include macro utilities here
 INCLUDE(OsgMacroUtils)
@@ -329,6 +329,7 @@
 
     INCLUDE(FindPkgConfig)
 
+    IF(WITH_GTK)
     PKG_CHECK_MODULES(GTK gtk+-2.0)
 
     IF(WIN32)
@@ -336,10 +337,15 @@
     ELSE(WIN32)
         PKG_CHECK_MODULES(GTKGL gtkglext-x11-1.0)
     ENDIF(WIN32)
+    ENDIF(WITH_GTK)
 
-    PKG_CHECK_MODULES(RSVG librsvg-2.0)
+    IF(WITH_SVG)
+      PKG_CHECK_MODULES(RSVG librsvg-2.0)
+    ENDIF(WITH_SVG)
     PKG_CHECK_MODULES(CAIRO cairo)
-    PKG_CHECK_MODULES(POPPLER poppler-glib)
+    IF(WITH_PDF)
+      PKG_CHECK_MODULES(POPPLER poppler-glib)
+    ENDIF(WITH_PDF)
 
 ENDIF(PKG_CONFIG_FOUND)
 
@@ -347,30 +353,30 @@
 IF   (BUILD_OSG_EXAMPLES)
 
 
-    FIND_PACKAGE(FLTK)
-    FIND_PACKAGE(GLUT)
-    FIND_PACKAGE(SDL)
-    FIND_PACKAGE(FOX)
+    MACRO_OPTIONAL_FIND_PACKAGE(FLTK)
+    MACRO_OPTIONAL_FIND_PACKAGE(GLUT)
+    MACRO_OPTIONAL_FIND_PACKAGE(SDL)
+    MACRO_OPTIONAL_FIND_PACKAGE(FOX)
 
     SET(wxWidgets_USE_LIBS base core gl net)
-    FIND_PACKAGE(wxWidgets)
+    MACRO_OPTIONAL_FIND_PACKAGE(wxWidgets)
 
     # To select a specific version of QT define DESIRED_QT_VERSION
     # via cmake -DDESIRED_QT_VERSION=4
     IF  (DESIRED_QT_VERSION)
 
         IF  (DESIRED_QT_VERSION MATCHES 4)
-          FIND_PACKAGE(Qt4)
+          MACRO_OPTIONAL_FIND_PACKAGE(Qt4)
         ELSE(DESIRED_QT_VERSION MATCHES 4)
-          FIND_PACKAGE(Qt3)
+          MACRO_OPTIONAL_FIND_PACKAGE(Qt3)
         ENDIF(DESIRED_QT_VERSION MATCHES 4)
 
     ELSE(DESIRED_QT_VERSION)
 
-        FIND_PACKAGE(Qt4)
+        MACRO_OPTIONAL_FIND_PACKAGE(Qt4)
 
         IF  (NOT QT4_FOUND)
-            FIND_PACKAGE(Qt3)
+            MACRO_OPTIONAL_FIND_PACKAGE(Qt3)
         ENDIF(NOT QT4_FOUND)
 
     ENDIF(DESIRED_QT_VERSION)
@@ -435,10 +441,10 @@
 # Image readers/writers depend on 3rd party libraries except for OS X which
 # can use Quicktime.
 IF(NOT APPLE)
-    FIND_PACKAGE(GIFLIB)
-    FIND_PACKAGE(JPEG)
-    FIND_PACKAGE(PNG)
-    FIND_PACKAGE(TIFF)
+    MACRO_OPTIONAL_FIND_PACKAGE(GIFLIB)
+    MACRO_OPTIONAL_FIND_PACKAGE(JPEG)
+    MACRO_OPTIONAL_FIND_PACKAGE(PNG)
+    MACRO_OPTIONAL_FIND_PACKAGE(TIFF)
 
     # QuickTime is required for OS X, but optional for Windows.
     IF(WIN32)
@@ -753,7 +759,7 @@
         ${PROJECT_BINARY_DIR}/doc/OpenSceneGraphReferenceDocs/osg32-32.png COPYONLY
     )
     #INSTALL(FILES ${PROJECT_BINARY_DIR}/doc/${PROJECT_NAME}ReferenceDocs-${OPENSCENEGRAPH_VERSION}.chm DESTINATION doc OPTIONAL COMPONENT openscenegraph-doc)
-    INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/doc/OpenSceneGraphReferenceDocs DESTINATION doc COMPONENT openscenegraph-doc)
+    INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/doc/OpenSceneGraphReferenceDocs DESTINATION ${GENTOO_DOCDIR} COMPONENT openscenegraph-doc)
 
     # now set up openthreads documentation generation
     IF(BUILD_REF_DOCS_TAGFILE)
@@ -769,7 +775,7 @@
         ${PROJECT_BINARY_DIR}/doc/OpenThreadsReferenceDocs/osg32-32.png COPYONLY
     )
     #INSTALL(FILES ${PROJECT_BINARY_DIR}/doc/${PROJECT_NAME}ReferenceDocs-${OPENSCENEGRAPH_VERSION}.chm DESTINATION doc OPTIONAL COMPONENT openscenegraph-doc)
-    INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/doc/OpenThreadsReferenceDocs DESTINATION doc COMPONENT openthreads-doc)
+    INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/doc/OpenThreadsReferenceDocs DESTINATION ${GENTOO_DOCDIR} COMPONENT openthreads-doc)
 
     # Process our other doxyfiles but don't create targets for these
     CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/Doxyfiles/all_Doxyfile
diff -ruN OpenSceneGraph-2.8.5/CMakeLists.txt~ OpenSceneGraph-2.8.5_mod/CMakeLists.txt~
--- OpenSceneGraph-2.8.5/CMakeLists.txt~	1969-12-31 16:00:00.000000000 -0800
+++ OpenSceneGraph-2.8.5_mod/CMakeLists.txt~	2012-08-29 14:01:24.000000000 -0700
@@ -0,0 +1,883 @@
+set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)
+
+IF(WIN32)
+    CMAKE_MINIMUM_REQUIRED(VERSION 2.4.6 FATAL_ERROR)
+ELSE(WIN32)
+    IF(APPLE)
+        CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0 FATAL_ERROR)
+    ELSE(APPLE)
+        CMAKE_MINIMUM_REQUIRED(VERSION 2.4.0 FATAL_ERROR)
+    ENDIF(APPLE)
+ENDIF(WIN32)
+
+if(COMMAND cmake_policy)
+    # Works around warnings libraries linked against that don't
+    # have absolute paths (e.g. -lpthreads)
+    cmake_policy(SET CMP0003 NEW)
+
+    # Works around warnings about escaped quotes in ADD_DEFINITIONS
+    # statements.
+    cmake_policy(SET CMP0005 NEW)
+
+    # cmake-2.6.1 introduces policy cmp0008 decide how to treat full path libraries that do not appear to be valid library file names
+    # quote from cvslog "Such libraries worked by accident in the VS IDE and Xcode generators in CMake 2.4 and below."
+    if(${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} GREATER 4 AND ${CMAKE_PATCH_VERSION} GREATER 0)
+        cmake_policy(SET CMP0008 OLD)
+    endif(${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} GREATER 4 AND ${CMAKE_PATCH_VERSION} GREATER 0)
+endif(COMMAND cmake_policy)
+
+PROJECT(OpenSceneGraph)
+
+SET(OPENSCENEGRAPH_MAJOR_VERSION 2)
+SET(OPENSCENEGRAPH_MINOR_VERSION 8)
+SET(OPENSCENEGRAPH_PATCH_VERSION 5)
+SET(OPENSCENEGRAPH_SOVERSION 74)
+
+# set to 0 when not a release candidate, non zero means that any generated 
+# svn tags will be treated as release candidates of given number
+SET(OPENSCENEGRAPH_RELEASE_CANDIDATE 0)
+
+SET(OPENSCENEGRAPH_VERSION ${OPENSCENEGRAPH_MAJOR_VERSION}.${OPENSCENEGRAPH_MINOR_VERSION}.${OPENSCENEGRAPH_PATCH_VERSION})
+
+SET(OSG_PLUGINS osgPlugins-${OPENSCENEGRAPH_VERSION})
+
+SET(OSG_PLUGIN_PREFIX "")
+
+IF (CYGWIN)
+    SET(OSG_PLUGIN_PREFIX "cygwin_")
+ENDIF(CYGWIN)
+
+IF(MINGW)
+    SET(OSG_PLUGIN_PREFIX "mingw_")
+ENDIF(MINGW)
+
+
+# We want to build SONAMES shared librariess
+SET(OPENSCENEGRAPH_SONAMES TRUE)
+SET(OPENTHREADS_SONAMES TRUE)
+
+SET(OpenThreads_SOURCE_DIR ${OpenSceneGraph_SOURCE_DIR})
+
+# We have some custom .cmake scripts not in the official distribution.
+# Maybe this can be used override existing behavior if needed?
+SET(CMAKE_MODULE_PATH "${OpenSceneGraph_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}")
+
+
+# Okay, here's the problem: On some platforms, linking against OpenThreads
+# is not enough and explicit linking to the underlying thread library
+# is also required (e.g. FreeBSD). But OpenThreads may be built with different
+# backends (Pthreads, Sproc, Windows) so we don't know what the underlying
+# thread library is because some platforms support multiple backends (e.g.
+# IRIX supports Sproc and Pthreads). Linking all libraries won't work
+# because the libraries may be incompatible.
+# So the current solution is to attempt best guess linking and exempt certain
+# cases. With IRIX, we're going to hope explicit linking to the underlying
+# library is not necessary. We currently don't case for pthreads on Windows
+# which might be an issue on things like Cygwin. This may need to be fixed.
+FIND_PACKAGE(Threads)
+IF(CMAKE_SYSTEM MATCHES IRIX)
+    # Erase CMAKE_THREAD_LIBS_INIT and hope it works
+    SET(CMAKE_THREAD_LIBS_INIT "" CACHE INTERNAL "")
+ENDIF(CMAKE_SYSTEM MATCHES IRIX)
+
+OPTION(OSG_MAINTAINER "Enable OpenSceneGraph maintainer build methods, such as making svn branches, tags, updating ChangeLog." OFF)
+IF (OSG_MAINTAINER)
+
+    #SET(OPENSCENEGRAPH_SVN "trunk")
+    SET(OPENSCENEGRAPH_SVN "branches")
+
+    SET(OPENSCENEGRAPH_BRANCH OpenSceneGraph-${OPENSCENEGRAPH_MAJOR_VERSION}.${OPENSCENEGRAPH_MINOR_VERSION})
+
+    #
+    # Provide target for tagging a release
+    #
+    SET(SVNCOMMAND svn)
+    SET(SVNTRUNKDIR     http://www.openscenegraph.org/svn/osg/OpenSceneGraph/trunk)
+    SET(SVNTAGDIR       http://www.openscenegraph.org/svn/osg/OpenSceneGraph/tags)
+    SET(SVNBRANCHDIR    http://www.openscenegraph.org/svn/osg/OpenSceneGraph/branches)
+
+    IF   (OPENSCENEGRAPH_SVN STREQUAL "trunk")
+        SET(SVNSOURCEDIR ${SVNTRUNKDIR})
+    ELSE (OPENSCENEGRAPH_SVN STREQUAL "trunk")
+        SET(SVNSOURCEDIR ${SVNBRANCHDIR}/${OPENSCENEGRAPH_BRANCH})
+    ENDIF(OPENSCENEGRAPH_SVN STREQUAL "trunk")
+
+
+    IF   (OPENSCENEGRAPH_RELEASE_CANDIDATE EQUAL 0)
+        SET(RELEASE_NAME OpenSceneGraph-${OPENSCENEGRAPH_VERSION})
+    ELSE (OPENSCENEGRAPH_RELEASE_CANDIDATE EQUAL 0)
+        SET(RELEASE_NAME OpenSceneGraph-${OPENSCENEGRAPH_VERSION}-rc${OPENSCENEGRAPH_RELEASE_CANDIDATE})
+    ENDIF(OPENSCENEGRAPH_RELEASE_CANDIDATE EQUAL 0)
+
+
+    ADD_CUSTOM_TARGET(tag-test
+        COMMAND echo ${SVNCOMMAND} copy ${SVNSOURCEDIR} ${SVNTAGDIR}/${RELEASE_NAME} -m "Release ${RELEASE_NAME}"
+    )
+
+    ADD_CUSTOM_TARGET(tag-run
+        COMMAND ${SVNCOMMAND} copy ${SVNSOURCEDIR} ${SVNTAGDIR}/${RELEASE_NAME} -m "Release ${RELEASE_NAME}"
+    )
+
+    ADD_CUSTOM_TARGET(branch-test
+        COMMAND echo ${SVNCOMMAND} copy ${SVNSOURCEDIR} ${SVNBRANCHDIR}/${OPENSCENEGRAPH_BRANCH} -m "Branch ${OPENSCENEGRAPH_BRANCH}"
+    )
+
+    ADD_CUSTOM_TARGET(branch-run
+        COMMAND ${SVNCOMMAND} copy ${SVNSOURCEDIR} ${SVNBRANCHDIR}/${OPENSCENEGRAPH_BRANCH} -m "Branch ${OPENSCENEGRAPH_BRANCH}"
+    )
+
+    #
+    # Provide target for generating ChangeLog
+    #
+    SET(GENERATELOGS svn2cl)
+
+    ADD_CUSTOM_TARGET(ChangeLog
+        COMMAND ${SVNCOMMAND} update
+        COMMAND ${GENERATELOGS} ${SVNSOURCEDIR}
+    )
+    
+ENDIF(OSG_MAINTAINER)
+
+
+# Find OpenGL
+FIND_PACKAGE(OpenGL)
+
+IF(APPLE)
+    FIND_LIBRARY(CARBON_LIBRARY Carbon)
+    FIND_LIBRARY(COCOA_LIBRARY Cocoa)
+ENDIF(APPLE)
+
+IF(UNIX)
+    # Not sure what this will do on Cygwin and Msys
+    # Also, remember OS X X11 is a user installed option so it may not exist.
+    FIND_PACKAGE(X11)
+    # Some Unicies need explicit linkage to the Math library or the build fails.
+    FIND_LIBRARY(MATH_LIBRARY m)
+
+    FIND_LIBRARY(DL_LIBRARY dl)
+    IF(NOT DL_LIBRARY)
+        SET(DL_LIBRARY "") # change from NOTFOUND to empty when passed to linker
+    ENDIF()
+
+ENDIF(UNIX)
+
+# Make the headers visible to everything
+IF(NOT ${PROJECT_BINARY_DIR} EQUAL ${PROJECT_SOURCE_DIR})
+   INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/include)
+ENDIF(NOT ${PROJECT_BINARY_DIR} EQUAL ${PROJECT_SOURCE_DIR})
+
+INCLUDE_DIRECTORIES(
+    ${OpenSceneGraph_SOURCE_DIR}/include
+    ${OPENGL_INCLUDE_DIR}
+)
+
+# Common global definitions
+#ADD_DEFINITIONS(-D)
+# Platform specific definitions
+
+
+IF(WIN32)
+
+    IF(MSVC)
+        # This option is to enable the /MP switch for Visual Studio 2005 and above compilers
+        OPTION(WIN32_USE_MP "Set to ON to build OpenSceneGraph with the /MP option (Visual Studio 2005 and above)." OFF)
+        MARK_AS_ADVANCED(WIN32_USE_MP)
+        IF(WIN32_USE_MP)
+            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
+        ENDIF(WIN32_USE_MP)
+
+        # turn off various warnings
+        # foreach(warning 4244 4251 4267 4275 4290 4786 4305 4996)
+        #     SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd${warning}")
+        # endforeach(warning)
+
+        # More MSVC specific compilation flags
+        ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
+        ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
+    ENDIF(MSVC)
+
+    #needed for net plugin
+    SET (OSG_SOCKET_LIBS wsock32)
+    # Both Cygwin and Msys need -DNOMINMAX ???
+    IF(UNIX)
+        ADD_DEFINITIONS(-DNOMINMAX)
+    ENDIF(UNIX)
+########################################################################################################
+# the following options are MSVC specific,
+# the first OSG_MSVC_VERSIONED_DLL activate a custom build-time layout that should allow to run examples and application
+# fron bin folder without requiring installation step.
+# it also prepend "osg${OPENSCENEGRAPH_SOVERSION}-" to only .dll files, leaving .lib files untouched in lib
+# it also use a hack to get rid of Debug and Release folder in MSVC projects
+# all the .dll and .pdb are in bin and all the .lib and .exp are in lib
+#
+# the second option disable incremental linking in debug build , that is enabled by default by CMake
+##########################################################################################################
+
+    IF(MSVC)
+        IF(${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} EQUAL 4 AND ${CMAKE_PATCH_VERSION} LESS 7)
+            MESSAGE("Warning:  disabling versioned options 2.4.6 exibits inconsintencies in .pdb naming, at least under MSVC, suggested upgrading at least to 2.4.7")
+            SET(OSG_MSVC_VERSIONED_DLL OFF)
+            SET(OSG_MSVC_DEBUG_INCREMENTAL_LINK ON)
+        ELSE(${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} EQUAL 4 AND ${CMAKE_PATCH_VERSION} LESS 7)
+            OPTION(OSG_MSVC_VERSIONED_DLL "Set to ON to build OpenSceneGraph with versioned dll names" ON)
+            MARK_AS_ADVANCED(OSG_MSVC_VERSIONED_DLL)
+            OPTION(OSG_MSVC_DEBUG_INCREMENTAL_LINK "Set to OFF to build OpenSceneGraph without incremental linking in debug (release is off by default)" ON)
+            MARK_AS_ADVANCED(OSG_MSVC_DEBUG_INCREMENTAL_LINK)
+            IF(NOT OSG_MSVC_DEBUG_INCREMENTAL_LINK)
+                SET(CMAKE_MODULE_LINKER_FLAGS_DEBUG "/debug /INCREMENTAL:NO")
+                SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "/debug /INCREMENTAL:NO")
+                SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "/debug /INCREMENTAL:NO")
+            ENDIF(NOT OSG_MSVC_DEBUG_INCREMENTAL_LINK)
+        ENDIF(${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} EQUAL 4 AND ${CMAKE_PATCH_VERSION} LESS 7)
+    ENDIF(MSVC)
+ENDIF(WIN32)
+
+########################################################################################################
+##### these were settings located in SetupCommon.cmake used in Luigi builds.... find out what are useful
+########################################################################################################
+#luigi#SET(CMAKE_VERBOSE_MAKEFILE TRUE)
+#luigi#SET(CMAKE_SKIP_RPATH TRUE)
+#luigi#SET(CMAKE_SKIP_RULE_DEPENDENCY TRUE)
+#luigi#IF(UNIX)
+#luigi#    LIST_CONTAINS(contains "g++" ${CMAKE_CXX_COMPILER_LIST})
+#luigi#    IF (contains)
+#luigi#        MESSAGE(${MY_MESSAGE_DEFAULT} "${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE} setting  CMAKE_CXX_COMPILER to g++")
+#luigi#        SET(CMAKE_CXX_COMPILER "g++")
+#luigi#        SET(CMAKE_CXX_COMPILER_LOADED 2)
+#luigi#        SET(CMAKE_CXX_COMPILER_WORKS 2)
+#luigi#    ENDIF (contains)
+#luigi#    SET(CMAKE_CXX_FLAGS_RELEASE "-O2")
+#luigi#    SET(CMAKE_CXX_FLAGS_DEBUG "-ggdb -gstabs")
+#luigi#ENDIF(UNIX)
+########################################################################################################
+
+OPTION(OSG_NOTIFY_DISABLED "Set to ON to build OpenSceneGraph with the notify() disabled." OFF)
+
+OPTION(OSG_USE_FLOAT_MATRIX "Set to ON to build OpenSceneGraph with float Matrix instead of double." OFF)
+MARK_AS_ADVANCED(OSG_USE_FLOAT_MATRIX)
+
+OPTION(OSG_USE_FLOAT_PLANE "Set to ON to build OpenSceneGraph with float Plane instead of double." OFF)
+MARK_AS_ADVANCED(OSG_USE_FLOAT_PLANE)
+
+OPTION(OSG_USE_FLOAT_BOUNDINGSPHERE "Set to ON to build OpenSceneGraph with float BoundingSphere instead of double." ON)
+MARK_AS_ADVANCED(OSG_USE_FLOAT_BOUNDINGSPHERE)
+
+OPTION(OSG_USE_FLOAT_BOUNDINGBOX "Set to ON to build OpenSceneGraph with float BoundingBox instead of double." ON)
+MARK_AS_ADVANCED(OSG_USE_FLOAT_BOUNDINGBOX)
+
+OPTION(OSG_USE_UTF8_FILENAME "Set to ON to use a UTF8 locale for filenames instead of the default locale." OFF)
+MARK_AS_ADVANCED(OSG_USE_UTF8_FILENAME)
+
+OPTION(OSG_DISABLE_MSVC_WARNINGS "Set to OFF to not disable MSVC warnings generated by OSG headers." ON)
+MARK_AS_ADVANCED(OSG_DISABLE_MSVC_WARNINGS)
+
+OPTION(OSG_USE_REF_PTR_IMPLICIT_OUTPUT_CONVERSION "Set to ON to use the ref_ptr<> T* operator() output conversion. " ON)
+
+OPTION(OSG_CPP_EXCEPTIONS_AVAILABLE "Set to OFF to disable compile of OSG components that use C++ exceptions." ON)
+
+################################################################################
+# Set Config file
+
+SET(OPENSCENEGRAPH_CONFIG_HEADER "${PROJECT_BINARY_DIR}/include/osg/Config")
+CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/src/osg/Config.in"
+               "${OPENSCENEGRAPH_CONFIG_HEADER}")
+# INSTALL_FILES(/include/osg/ FILES "${OPENSCENEGRAPH_CONFIG_HEADER}")
+
+
+################################################################################
+# Optional build components
+
+# OSG Applications
+OPTION(BUILD_OSG_APPLICATIONS "Enable to build OSG Applications (e.g. osgviewer)" ON)
+
+# OSG Examples
+OPTION(BUILD_OSG_EXAMPLES "Enable to build OSG Examples" OFF)
+
+################################################################################
+# 3rd Party Dependency Stuff
+IF(WIN32)
+    INCLUDE(Find3rdPartyDependencies)
+ENDIF(WIN32)
+
+# Common to all platforms:
+FIND_PACKAGE(FreeType)
+FIND_PACKAGE(Inventor)
+FIND_PACKAGE(Jasper)
+FIND_PACKAGE(OpenEXR)
+FIND_PACKAGE(COLLADA)
+FIND_PACKAGE(FBX)
+FIND_PACKAGE(ZLIB)
+FIND_PACKAGE(Xine)
+FIND_PACKAGE(OpenVRML)
+FIND_PACKAGE(Performer)
+FIND_PACKAGE(GDAL)
+FIND_PACKAGE(CURL)
+FIND_PACKAGE(ITK)
+FIND_PACKAGE(LibVNCServer)
+FIND_PACKAGE(OurDCMTK)
+FIND_PACKAGE(OpenAL)
+FIND_PACKAGE(XUL)
+FIND_PACKAGE(FFmpeg)
+
+# Include macro utilities here
+INCLUDE(OsgMacroUtils)
+
+#use pkg-config to find various modues
+INCLUDE(FindPkgConfig OPTIONAL)
+
+IF(PKG_CONFIG_FOUND)
+
+    INCLUDE(FindPkgConfig)
+
+    PKG_CHECK_MODULES(GTK gtk+-2.0)
+
+    IF(WIN32)
+        PKG_CHECK_MODULES(GTKGL gtkglext-win32-1.0)
+    ELSE(WIN32)
+        PKG_CHECK_MODULES(GTKGL gtkglext-x11-1.0)
+    ENDIF(WIN32)
+
+    PKG_CHECK_MODULES(RSVG librsvg-2.0)
+    PKG_CHECK_MODULES(CAIRO cairo)
+    PKG_CHECK_MODULES(POPPLER poppler-glib)
+
+ENDIF(PKG_CONFIG_FOUND)
+
+#optional example related dependencies
+IF   (BUILD_OSG_EXAMPLES)
+
+
+    FIND_PACKAGE(FLTK)
+    FIND_PACKAGE(GLUT)
+    FIND_PACKAGE(SDL)
+    FIND_PACKAGE(FOX)
+
+    SET(wxWidgets_USE_LIBS base core gl net)
+    FIND_PACKAGE(wxWidgets)
+
+    # To select a specific version of QT define DESIRED_QT_VERSION
+    # via cmake -DDESIRED_QT_VERSION=4
+    IF  (DESIRED_QT_VERSION)
+
+        IF  (DESIRED_QT_VERSION MATCHES 4)
+          FIND_PACKAGE(Qt4)
+        ELSE(DESIRED_QT_VERSION MATCHES 4)
+          FIND_PACKAGE(Qt3)
+        ENDIF(DESIRED_QT_VERSION MATCHES 4)
+
+    ELSE(DESIRED_QT_VERSION)
+
+        FIND_PACKAGE(Qt4)
+
+        IF  (NOT QT4_FOUND)
+            FIND_PACKAGE(Qt3)
+        ENDIF(NOT QT4_FOUND)
+
+    ENDIF(DESIRED_QT_VERSION)
+
+ENDIF(BUILD_OSG_EXAMPLES)
+
+
+
+
+
+
+#
+# Test to determine if we want the "tripledot" form of the GLU tesselator callback.
+#
+IF(NOT DEFAULT_GLU_TESS_CALLBACK_TRIPLEDOT)
+    IF(WIN32 OR CMAKE_SYSTEM_NAME MATCHES "Linux")
+
+        # Skip the compile check for platforms that never need the variable
+        # form.
+        SET(DEFAULT_GLU_TESS_CALLBACK_TRIPLEDOT false)
+
+    ELSE(WIN32 OR CMAKE_SYSTEM_NAME MATCHES "Linux")
+
+        # For other platforms perform the check
+        INCLUDE(CheckCXXSourceCompiles)
+        SET(CMAKE_REQUIRED_DEFINITIONS -DGLU_TESS_CALLBACK_TRIPLEDOT)
+        SET(CMAKE_REQUIRED_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/include ${GLUT_INCLUDE_DIR} ${GL_INCLUDE_DIR})
+        SET(CMAKE_REQUIRED_LIBRARIES ${GLUT_LIBRARY} ${GL_LIBRARY})
+        CHECK_CXX_SOURCE_COMPILES(
+            "#include <osg/GL>
+            #include <osg/GLU>
+            static void testcb(GLvoid *, void*) { }
+            int main() {
+               GLUtesselator *t = gluNewTess();
+               gluTessCallback(t, GLU_TESS_VERTEX_DATA, (GLU_TESS_CALLBACK) testcb);
+               return 0;
+            }"
+            GLU_Tesselator_Needs_Variable_Parameter_Callback_Convention_Failure_Means_No)
+        SET(DEFAULT_GLU_TESS_CALLBACK_TRIPLEDOT
+            ${GLU_Tesselator_Needs_Variable_Parameter_Callback_Convention_Failure_Means_No})
+
+    ENDIF(WIN32 OR CMAKE_SYSTEM_NAME MATCHES "Linux")
+ENDIF(NOT DEFAULT_GLU_TESS_CALLBACK_TRIPLEDOT)
+
+OPTION(OSG_GLU_TESS_CALLBACK_TRIPLEDOT "Set to ON to build with variable parameter (...) version of GLU tesselator callback" ${DEFAULT_GLU_TESS_CALLBACK_TRIPLEDOT})
+IF(OSG_GLU_TESS_CALLBACK_TRIPLEDOT)
+    ADD_DEFINITIONS(-DGLU_TESS_CALLBACK_TRIPLEDOT)
+ENDIF(OSG_GLU_TESS_CALLBACK_TRIPLEDOT)
+
+# Platform specific:
+# (We can approach this one of two ways. We can try to FIND everything
+# and simply check if we found the packages before actually building
+# or we can hardcode the cases. The advantage of the former is that
+# packages that are installed on platforms that don't require them
+# will still get built (presuming no compatibility issues). But this
+# also means modules that are redundant may get built. For example,
+# OS X doesn't need GIF, JPEG, PNG, TIFF, etc because it uses QuickTime.
+# Also, it will clutter the CMake menu with "NOT_FOUND".
+# The downside to the latter is that it is harder to build those
+# potentially redundant modules.)
+
+# Image readers/writers depend on 3rd party libraries except for OS X which
+# can use Quicktime.
+IF(NOT APPLE)
+    FIND_PACKAGE(GIFLIB)
+    FIND_PACKAGE(JPEG)
+    FIND_PACKAGE(PNG)
+    FIND_PACKAGE(TIFF)
+
+    # QuickTime is required for OS X, but optional for Windows.
+    IF(WIN32)
+        FIND_PACKAGE(QuickTime)
+    ENDIF(WIN32)
+
+ELSE(NOT APPLE)
+    FIND_PACKAGE(QuickTime)
+ENDIF(NOT APPLE)
+
+################################################################################
+# Create bin and lib directories if required
+
+IF("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
+   FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/bin ${CMAKE_BINARY_DIR}/lib ${CMAKE_BINARY_DIR}/lib/${OSG_PLUGINS})
+ENDIF("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
+
+
+################################################################################
+# Installation stuff
+
+SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "add a postfix, usually d on windows")
+ADD_DEFINITIONS(-DOSG_DEBUG_POSTFIX=${CMAKE_DEBUG_POSTFIX})
+
+IF(UNIX AND NOT WIN32)
+  IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
+    ADD_DEFINITIONS("-D_DEBUG")
+  ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")
+ENDIF(UNIX AND NOT WIN32)
+
+IF(CYGWIN)
+  IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
+    ADD_DEFINITIONS("-D_DEBUG")
+  ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")
+ENDIF(CYGWIN)
+
+IF(UNIX AND NOT WIN32 AND NOT APPLE)
+  IF(CMAKE_SIZEOF_VOID_P MATCHES "8")
+      SET(LIB_POSTFIX "64" CACHE STRING "suffix for 32/64 dir placement")
+      MARK_AS_ADVANCED(LIB_POSTFIX)
+  ENDIF(CMAKE_SIZEOF_VOID_P MATCHES "8")
+ENDIF(UNIX AND NOT WIN32 AND NOT APPLE)
+IF(NOT DEFINED LIB_POSTFIX)
+    SET(LIB_POSTFIX "")
+ENDIF(NOT DEFINED LIB_POSTFIX)
+
+# Here we apparantly do some funky stuff with making the bin/ and lib/
+# folders which is probably needed to work around a very old CMake bug?
+
+#SET(OUTPUT_BINDIR ${PROJECT_BINARY_DIR}/bin/${CMAKE_SYSTEM_NAME})
+SET(OUTPUT_BINDIR ${PROJECT_BINARY_DIR}/bin)
+MAKE_DIRECTORY(${OUTPUT_BINDIR})
+IF(MSVC AND NOT MSVC_IDE)
+    MAKE_DIRECTORY(${OUTPUT_BINDIR}/${OSG_PLUGINS})
+ENDIF(MSVC AND NOT MSVC_IDE)
+
+#SET(OUTPUT_LIBDIR ${PROJECT_BINARY_DIR}/lib/${CMAKE_SYSTEM_NAME})
+SET(OUTPUT_LIBDIR ${PROJECT_BINARY_DIR}/lib)
+MAKE_DIRECTORY(${OUTPUT_LIBDIR})
+IF(NOT MSVC)
+    MAKE_DIRECTORY(${OUTPUT_LIBDIR}/${OSG_PLUGINS})
+ENDIF(NOT MSVC)
+
+# On CMake 2.4.x use EXECUTABLE_OUTPUT_PATH and LIBRARY_OUTPUT_PATH and later
+# we work around the DLL placement by use of the PREFIX target property hack
+#
+# On CMake 2.6.x use the newly minted CMAKE_LIBRARY_OUTPUT_DIRECTORY,
+# CMAKE_ARCHIVE_OUTPUT_DIRECTORY & CMAKE_RUNTIME_OUTPUT_DIRECTORY
+#
+# CMake >= 2.8.1 changed the output directory algorithm (See doc).
+# Here we also set per-configuration directories (CMAKE_*_OUTPUT_DIRECTORY_<CONFIG>), or else binaries are generated in /bin/Debug and /bin/Release, etc. with MSVC and Xcode.
+# (Doc reads "multi-configuration generators (VS, Xcode) do NOT append a per-configuration subdirectory to the specified directory").
+# The workaround for 2.6.x (adding "../" as an output prefix for each target) seem to have no effect in >=2.8.1, so there is no need to change this.
+IF(CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION LESS 5)
+    # If CMake < 2.6.0
+    SET(EXECUTABLE_OUTPUT_PATH ${OUTPUT_BINDIR})
+    SET(LIBRARY_OUTPUT_PATH    ${OUTPUT_LIBDIR})
+ELSE()
+    # If CMake >= 2.6.0
+    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
+    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
+    IF(WIN32)
+        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
+    ELSE(WIN32)
+        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
+    ENDIF(WIN32)
+
+    # Testing CMAKE_VERSION is possible in >= 2.6.4 only
+    BUILDER_VERSION_GREATER(2 8 0)
+    IF(VALID_BUILDER_VERSION)  # If CMake >= 2.8.1
+        FOREACH(CONF ${CMAKE_CONFIGURATION_TYPES})        # For each configuration (Debug, Release, MinSizeRel... and/or anything the user chooses)
+            STRING(TOUPPER "${CONF}" CONF)                # Go uppercase (DEBUG, RELEASE...)
+            SET("CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_LIBDIR}")
+            SET("CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_BINDIR}")
+            IF(WIN32)
+                SET("CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_BINDIR}")
+            ELSE()
+                SET("CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_LIBDIR}")
+            ENDIF()
+        ENDFOREACH()
+    ENDIF(VALID_BUILDER_VERSION)
+ENDIF()
+
+#SET(INSTALL_BINDIR OpenSceneGraph/bin)
+#SET(INSTALL_INCDIR OpenSceneGraph/include)
+#SET(INSTALL_LIBDIR OpenSceneGraph/lib)
+#SET(INSTALL_DOCDIR OpenSceneGraph/doc)
+
+################################################################################
+# User Options
+
+
+# Expose CMAKE_INCLUDE_PATH and CMAKE_LIBARY_PATH to the GUI so users
+# may set these values without needing to manipulate the environment.
+SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} CACHE STRING "You may add additional search paths here. Use ; to separate multiple paths.")
+SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} CACHE STRING "You may add additional search paths here. Use ; to separate multiple paths.")
+# We are proposing that a new variable called CMAKE_PREFIX_PATH be introduced
+# to CMake to compliment CMAKE_INCLUDE_PATH and CMAKE_LIBRARY_PATH.
+# A formal feature request has been submited to CMake, Bug #4947.
+# It is intended for those users who have common prefixes for their INCLUDE
+# and LIBRARY locations. So if users have headers in /usr/local/include
+# and libraries in /usr/local/lib, the common prefix is /usr/local.
+# It should also cover the case where headers and libraries are
+# in the same directory.
+# Our proposal expects that FIND_* commands will automatically search for
+# CMAKE_PREFIX_PATH right after CMAKE_INCLUDE_PATH or CMAKE_LIBRARY_PATH.
+# Obviously, since CMake does not currently support this, we must write
+# our Find*.cmake modules to explicitly support this. Otherwise, this variable
+# will have no impact.
+# This is unofficial so this may be removed or changed at anytime.
+SET(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} CACHE STRING "(EXPERIMENTAL) You may add additional search paths here. Use ; to separate multiple paths.")
+
+# This is for an advanced option to give aggressive warnings
+# under different compilers. If yours is not implemented, this option
+# will not be made available.
+IF(CMAKE_COMPILER_IS_GNUCXX)
+    # To be complete, we might also do GNUCC flags,
+    # but everything here is C++ code.
+    # -Wshadow and -Woverloaded-virtual are also interesting flags, but OSG
+    # returns too many hits.
+    # FYI, if we do implement GNUCC, then -Wmissing-prototypes in another
+    # interesting C-specific flag.
+    # Also, there is a bug in gcc 4.0. Under C++, -pedantic will create
+    # errors instead of warnings for certain issues, including superfluous
+    # semicolons and commas, and the use of long long. -fpermissive seems
+    # to be the workaround.
+    SET(OSG_AGGRESSIVE_WARNING_FLAGS -Wall -Wparentheses -Wno-long-long -Wno-import -pedantic -Wreturn-type -Wmissing-braces -Wunknown-pragmas -Wunused -fpermissive)
+
+    # Previous included -Wformat=2 in OSG_AGGRESSIVE_WARNING_FLAGS but had to remove it due to standard library errors
+
+
+ELSE(CMAKE_COMPILER_IS_GNUCXX)
+    IF(MSVC)
+        # FIXME: What are good aggressive warning flags for Visual Studio?
+        # And do we need to further subcase this for different versions of VS?
+        # CMake variables: MSVC60, MSVC70, MSVC71, MSVC80, CMAKE_COMPILER_2005
+        SET(OSG_AGGRESSIVE_WARNING_FLAGS /W4 /wd4706 /wd4127 /wd4100)
+
+
+    ELSE(MSVC)
+        # CMake lacks an elseif, so other non-gcc, non-VS compilers need
+        # to be listed below. If unhandled, OSG_AGGRESSIVE_WARNING_FLAGS should
+        # remain unset.
+    ENDIF(MSVC)
+ENDIF(CMAKE_COMPILER_IS_GNUCXX)
+
+# This part is for the CMake menu option to toggle the warnings on/off.
+# This will only be made available if we set values for OSG_AGGRESSIVE_WARNING_FLAGS.
+IF(OSG_AGGRESSIVE_WARNING_FLAGS)
+
+    IF (APPLE)
+        SET(DEFAULT_USE_AGGRESSIVE_WARNINGS OFF)
+    ELSE(APPLE)
+        SET(DEFAULT_USE_AGGRESSIVE_WARNINGS ON)
+    ENDIF(APPLE)
+
+    OPTION(OSG_USE_AGGRESSIVE_WARNINGS "Enable to activate aggressive warnings" ${DEFAULT_USE_AGGRESSIVE_WARNINGS})
+    MARK_AS_ADVANCED(OSG_USE_AGGRESSIVE_WARNINGS)
+
+    IF(OSG_USE_AGGRESSIVE_WARNINGS)
+        # Add flags defined by OSG_AGGRESSIVE_WARNING_FLAGS if they aren't already there
+        FOREACH(flag ${OSG_AGGRESSIVE_WARNING_FLAGS})
+            IF(NOT CMAKE_CXX_FLAGS MATCHES "${flag}")
+                SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}")
+            ENDIF(NOT CMAKE_CXX_FLAGS MATCHES "${flag}")
+        ENDFOREACH(flag)
+    ELSE(OSG_USE_AGGRESSIVE_WARNINGS)
+        # Remove all flags considered aggresive
+        FOREACH(flag ${OSG_AGGRESSIVE_WARNING_FLAGS})
+            STRING(REGEX REPLACE "${flag}" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+        ENDFOREACH(flag)
+    ENDIF(OSG_USE_AGGRESSIVE_WARNINGS)
+ENDIF(OSG_AGGRESSIVE_WARNING_FLAGS)
+
+
+# Dynamic vs Static Linking
+OPTION(DYNAMIC_OPENSCENEGRAPH "Set to ON to build OpenSceneGraph for dynamic linking.  Use OFF for static." ON)
+IF   (DYNAMIC_OPENSCENEGRAPH)
+    SET(OPENSCENEGRAPH_USER_DEFINED_DYNAMIC_OR_STATIC "SHARED")
+ELSE (DYNAMIC_OPENSCENEGRAPH)
+    SET(OPENSCENEGRAPH_USER_DEFINED_DYNAMIC_OR_STATIC "STATIC")
+ENDIF(DYNAMIC_OPENSCENEGRAPH)
+
+
+# OSG Core
+ADD_SUBDIRECTORY(src)
+
+IF   (BUILD_OSG_APPLICATIONS)
+    ADD_SUBDIRECTORY(applications)
+ENDIF(BUILD_OSG_APPLICATIONS)
+
+IF   (BUILD_OSG_EXAMPLES)
+    ADD_SUBDIRECTORY(examples)
+ENDIF(BUILD_OSG_EXAMPLES)
+
+
+# Set defaults for Universal Binaries. We want 32-bit Intel/PPC on 10.4
+# and 32/64-bit Intel/PPC on >= 10.5. Anything <= 10.3 doesn't support.
+IF(APPLE)
+    # These are just defaults/recommendations, but how we want to build
+    # out of the box. But the user needs to be able to change these options.
+    # So we must only set the values the first time CMake is run, or we
+    # will overwrite any changes the user sets.
+    # FORCE is used because the options are not reflected in the UI otherwise.
+    # Seems like a good place to add version specific compiler flags too.
+    IF(NOT OSG_CONFIG_HAS_BEEN_RUN_BEFORE)
+        # This is really fragile, but CMake doesn't provide the OS system
+        # version information we need. (Darwin versions can be changed
+        # independently of OS X versions.)
+        # It does look like CMake handles the CMAKE_OSX_SYSROOT automatically.
+        IF(EXISTS /Developer/SDKs/MacOSX10.5.sdk)
+            # 64-bit compiles are not supported with Carbon. We should enable 
+            # 64-bit compilation by default once osgviewer has been 
+            # rewritten with Cocoa.
+            #SET(CMAKE_OSX_ARCHITECTURES "ppc;i386;ppc64;x86_64" CACHE STRING "Build architectures for OSX" FORCE)
+            SET(CMAKE_OSX_ARCHITECTURES "ppc;i386" CACHE STRING "Build architectures for OSX" FORCE)
+            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.5 -ftree-vectorize -fvisibility-inlines-hidden" CACHE STRING "Flags used by the compiler during all build types." FORCE)
+        ELSE(EXISTS /Developer/SDKs/MacOSX10.5.sdk)
+            IF(EXISTS /Developer/SDKs/MacOSX10.4u.sdk)
+                SET(CMAKE_OSX_ARCHITECTURES "ppc;i386" CACHE STRING "Build architectures for OSX" FORCE)
+                SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.4 -ftree-vectorize -fvisibility-inlines-hidden" CACHE STRING "Flags used by the compiler during all build types." FORCE)
+            ELSE(EXISTS /Developer/SDKs/MacOSX10.4u.sdk)
+                # No Universal Binary support
+                # Should break down further to set the -mmacosx-version-min,
+                # but the SDK detection is too unreliable here.
+            ENDIF(EXISTS /Developer/SDKs/MacOSX10.4u.sdk)
+        ENDIF(EXISTS /Developer/SDKs/MacOSX10.5.sdk)
+    ENDIF(NOT OSG_CONFIG_HAS_BEEN_RUN_BEFORE)
+
+    OPTION(OSG_BUILD_APPLICATION_BUNDLES "Enable the building of applications and examples as OSX Bundles" OFF)
+
+ENDIF(APPLE)
+
+
+#
+# Provide target for generating wrappers
+#
+SET(GENWRAPPER genwrapper)
+
+ADD_CUSTOM_TARGET(wrappers
+    COMMAND ${GENWRAPPER} -c ${OpenSceneGraph_SOURCE_DIR}/src/osgWrappers/genwrapper.conf -t ${OpenSceneGraph_SOURCE_DIR}/src/osgWrappers/Doxyfile.template -d ${OpenSceneGraph_SOURCE_DIR} | doxygen -
+    COMMAND ${GENWRAPPER} -c ${OpenSceneGraph_SOURCE_DIR}/src/osgWrappers/genwrapper.conf -l ${OpenSceneGraph_SOURCE_DIR}
+)
+
+# For Doxygen
+INCLUDE(${CMAKE_ROOT}/Modules/Documentation.cmake OPTIONAL)
+OPTION(BUILD_DOCUMENTATION "Build OpenSceneGraph reference documentation using doxygen (use: make DoxygenDoc)" OFF)
+MARK_AS_ADVANCED(CLEAR BUILD_DOCUMENTATION)
+# To build the documention, you will have to enable it
+# and then do the equivalent of "make DoxygenDoc".
+IF(BUILD_DOCUMENTATION)
+
+    OPTION(BUILD_REF_DOCS_SEARCHENGINE "Enable doxygen's search engine (requires that documentation to be installed on a php enabled web server)" OFF)
+    IF(BUILD_REF_DOCS_SEARCHENGINE)
+        SET(SEARCHENGINE YES)
+    ELSE(BUILD_REF_DOCS_SEARCHENGINE)
+        SET(SEARCHENGINE NO)
+    ENDIF(BUILD_REF_DOCS_SEARCHENGINE)
+
+    OPTION(BUILD_REF_DOCS_TAGFILE "Generate a tag file named osg.tag on the documentation web server" OFF)
+    IF(BUILD_REF_DOCS_TAGFILE)
+        SET(GENERATE_TAGFILE "${OpenSceneGraph_BINARY_DIR}/doc/OpenSceneGraphReferenceDocs/osg.tag")
+    ELSE(BUILD_REF_DOCS_TAGFILE)
+        SET(GENERATE_TAGFILE "")
+    ENDIF(BUILD_REF_DOCS_TAGFILE)
+
+    IF(DOT)
+        SET(HAVE_DOT YES)
+    ELSE(DOT)
+        SET(HAVE_DOT NO)
+    ENDIF(DOT)
+    
+    # If html help generation was requested. DOCUMENTATION_HTML_HELP is defined by Documentation.cmake
+    SET(GENERATE_HTMLHELP "NO")
+    IF(DOCUMENTATION_HTML_HELP)
+        # on windows Documentation.cmake finds the html help workshop fi it exists. On u*ix we might have it with wine but no way to point it out
+        IF(NOT WIN32)
+            SET(HTML_HELP_COMPILER "" CACHE FILEPATH "Enter location of the HTML help compiler to let doxygen compile html")
+            MARK_AS_ADVANCED(HTML_HELP_COMPILER)
+        ENDIF(NOT WIN32)
+        # this var sets a proper value in .doxygen files when coniguring them below
+        SET(GENERATE_HTMLHELP "YES")
+    endif(DOCUMENTATION_HTML_HELP)
+  
+    # This processes our doxyfile.cmake and substitutes paths to generate
+    # a final Doxyfile
+    CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/Doxyfiles/doxyfile.cmake
+        ${PROJECT_BINARY_DIR}/doc/openscenegraph.doxyfile
+    )
+    # copy the osg logo to documentations target folder
+    CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/PlatformSpecifics/Windows/icons/src/osg32-32.png
+        ${PROJECT_BINARY_DIR}/doc/OpenSceneGraphReferenceDocs/osg32-32.png COPYONLY
+    )
+    #INSTALL(FILES ${PROJECT_BINARY_DIR}/doc/${PROJECT_NAME}ReferenceDocs-${OPENSCENEGRAPH_VERSION}.chm DESTINATION doc OPTIONAL COMPONENT openscenegraph-doc)
+    INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/doc/OpenSceneGraphReferenceDocs DESTINATION doc COMPONENT openscenegraph-doc)
+
+    # now set up openthreads documentation generation
+    IF(BUILD_REF_DOCS_TAGFILE)
+        SET(GENERATE_TAGFILE "${OpenSceneGraph_BINARY_DIR}/doc/OpenThreadsReferenceDocs/ot.tag")
+    ENDIF(BUILD_REF_DOCS_TAGFILE)
+
+    # This processes our openthreads.doxyfile.cmake and generate a final doxyfile
+    CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/Doxyfiles/openthreads.doxyfile.cmake
+        ${PROJECT_BINARY_DIR}/doc/openthreads.doxyfile
+    )
+    # copy the osg logo to documentations target folder
+    CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/PlatformSpecifics/Windows/icons/src/osg32-32.png
+        ${PROJECT_BINARY_DIR}/doc/OpenThreadsReferenceDocs/osg32-32.png COPYONLY
+    )
+    #INSTALL(FILES ${PROJECT_BINARY_DIR}/doc/${PROJECT_NAME}ReferenceDocs-${OPENSCENEGRAPH_VERSION}.chm DESTINATION doc OPTIONAL COMPONENT openscenegraph-doc)
+    INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/doc/OpenThreadsReferenceDocs DESTINATION doc COMPONENT openthreads-doc)
+
+    # Process our other doxyfiles but don't create targets for these
+    CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/Doxyfiles/all_Doxyfile
+        ${PROJECT_BINARY_DIR}/doc/all_Doxyfile)
+    CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/Doxyfiles/auto_Doxyfile
+        ${PROJECT_BINARY_DIR}/doc/auto_Doxyfile)
+    CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/Doxyfiles/core_Doxyfile
+        ${PROJECT_BINARY_DIR}/doc/core_Doxyfile)
+    
+    # This creates a new target to build documentation.
+    # It runs ${DOXYGEN} which is the full path and executable to
+    # Doxygen on your system, set by the FindDoxygen.cmake module
+    # (called by FindDocumentation.cmake).
+    # It runs the final generated Doxyfile against it.
+    # The DOT_PATH is substituted into the Doxyfile.
+    ADD_CUSTOM_TARGET(doc_openscenegraph ${DOXYGEN}
+        ${PROJECT_BINARY_DIR}/doc/openscenegraph.doxyfile
+    )
+    ADD_CUSTOM_TARGET(doc_openthreads ${DOXYGEN}
+        ${PROJECT_BINARY_DIR}/doc/openthreads.doxyfile
+    )
+ENDIF(BUILD_DOCUMENTATION)
+
+OPTION(BUILD_DASHBOARD_REPORTS "Set to ON to activate reporting of OpenSceneGraph builds here http://www.cdash.org/CDashPublic/index.php?project=OpenSceneGraph" OFF)
+IF(BUILD_DASHBOARD_REPORTS)
+# The following are required to uses Dart and the Cdash dashboard
+# viewable here : http://www.cdash.org/CDashPublic/index.php?project=OpenSceneGraph
+    INCLUDE(Dart)
+ENDIF(BUILD_DASHBOARD_REPORTS)
+
+# present the packaging option only if we have the cpack command defined (effectively >= 2.6.0)
+IF(CMAKE_CPACK_COMMAND)
+    OPTION(BUILD_OSG_PACKAGES "Set to ON to generate CPack configuration files and packaging targets" OFF)
+    IF(BUILD_OSG_PACKAGES)
+      INCLUDE(OsgCPack)
+    ENDIF(BUILD_OSG_PACKAGES)
+ENDIF(CMAKE_CPACK_COMMAND)
+
+# Generate pkg-config configuration file
+
+CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/packaging/pkgconfig/openscenegraph.pc.in
+        ${PROJECT_BINARY_DIR}/packaging/pkgconfig/openscenegraph.pc
+    @ONLY
+    )
+
+INSTALL(FILES ${PROJECT_BINARY_DIR}/packaging/pkgconfig/openscenegraph.pc DESTINATION lib${LIB_POSTFIX}/pkgconfig COMPONENT libopenscenegraph-dev)
+
+# Run this as late as possible so users can easier spot the message
+IF (${CMAKE_INSTALL_PREFIX} STREQUAL "/usr/local")
+SET(REQUIRES_LIBPATH_MESSAGE ON)
+ENDIF(${CMAKE_INSTALL_PREFIX} STREQUAL "/usr/local") 
+
+IF(REQUIRES_LIBPATH_MESSAGE)
+
+    IF (NOT OSG_LIBPATH_MESSAGE_HAS_BEEN_RUN_BEFORE)
+ 
+        SET(OSG_LIBPATH_MESSAGE_HAS_BEEN_RUN_BEFORE 1 CACHE INTERNAL "Flag to track whether the libpath message has been reported before")
+
+        MESSAGE("\nThe build system is configured to instal libraries to ${CMAKE_INSTALL_PREFIX}/lib${LIB_POSTFIX}\n"
+            "Your applications may not be able to find your installed libraries unless you:\n"
+            "    set your LD_LIBRARY_PATH (user specific) or\n"
+            "    update your ld.so configuration (system wide)")
+        IF(IS_DIRECTORY /etc/ld.so.conf.d)
+            MESSAGE("You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n"
+                "applications find the installed osg libraries, system wide, you could install a\n"
+                "openscenegraph specific ld.so configuration with:\n"
+                "    sudo make install_ld_conf\n")
+            CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/packaging/ld.so.conf.d/openscenegraph.conf.in
+                ${PROJECT_BINARY_DIR}/packaging/ld.so.conf.d/openscenegraph.conf
+            )
+            ADD_CUSTOM_TARGET(install_ld_conf ${CMAKE_COMMAND} -E copy_if_different 
+                ${PROJECT_BINARY_DIR}/packaging/ld.so.conf.d/openscenegraph.conf
+                /etc/ld.so.conf.d/openscenegraph.conf
+                COMMAND ldconfig
+                COMMENT "Copying openscenegraph.conf to /etc/ld.so.conf.d and running ldconfig"
+            )
+        ELSE(IS_DIRECTORY /etc/ld.so.conf.d)
+            IF(EXISTS /etc/ld.so.conf)
+                MESSAGE("You have an ld.so.conf file in /etc, if you wish to ensure \n"
+                "that applications find the installed osg libraries, system wide, you\n"
+                "could add ${CMAKE_INSTALL_PREFIX}/lib${LIB_POSTFIX} to it.")
+            ENDIF(EXISTS /etc/ld.so.conf)
+        ENDIF(IS_DIRECTORY /etc/ld.so.conf.d)
+
+        # emit a message during installation.
+        INSTALL(CODE "MESSAGE(\"Libraries were installed to ${CMAKE_INSTALL_PREFIX}lib${LIB_POSTFIX}.\\nYou may need to update your ld.so configuration. \")")
+
+    ENDIF(NOT OSG_LIBPATH_MESSAGE_HAS_BEEN_RUN_BEFORE)
+
+ELSE(REQUIRES_LIBPATH_MESSAGE)
+
+    SET(OSG_LIBPATH_MESSAGE_HAS_BEEN_RUN_BEFORE 0 CACHE INTERNAL "Flag to track whether the libpath message has been reported before")
+
+ENDIF(REQUIRES_LIBPATH_MESSAGE)
+
+
+# This needs to be run very last so other parts of the scripts can take
+# advantage of this.
+IF(NOT OSG_CONFIG_HAS_BEEN_RUN_BEFORE)
+    SET(OSG_CONFIG_HAS_BEEN_RUN_BEFORE 1 CACHE INTERNAL "Flag to track whether this is the first time running CMake or if CMake has been configured before")
+ENDIF(NOT OSG_CONFIG_HAS_BEEN_RUN_BEFORE)
+
+#-----------------------------------------------------------------------------
+### uninstall target
+#-----------------------------------------------------------------------------
+CONFIGURE_FILE(
+  "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in"
+  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
+  IMMEDIATE @ONLY)
+ADD_CUSTOM_TARGET(uninstall
+  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
diff -ruN OpenSceneGraph-2.8.5/CMakeModules/#FindFLTK.cmake# OpenSceneGraph-2.8.5_mod/CMakeModules/#FindFLTK.cmake#
--- OpenSceneGraph-2.8.5/CMakeModules/#FindFLTK.cmake#	1969-12-31 16:00:00.000000000 -0800
+++ OpenSceneGraph-2.8.5_mod/CMakeModules/#FindFLTK.cmake#	2012-08-29 14:08:46.000000000 -0700
@@ -0,0 +1,12 @@
+        /usr/freeware/lib64
+    )
+
+ENDMACRO(FIND_FLTK_LIBRARY LIBRARY LIBRARYNAME)
+
+FIND_FLTK_LIBRARY(FLTK_LIBRARY fltk)
+FIND_FLTK_LIBRARY(FLTK_GL_LIBRARY fltk_gl)
+
+SET(FLTK_FOUND "NO")
+IF(FLTK_LIBRARY AND FLTK_INCLUDE_DIR)
+    SET(FLTK_FOUND "YES")
+ENDIF(FLTK_LIBRARY AND FLTK_INCLUDE_DIR)
diff -ruN OpenSceneGraph-2.8.5/CMakeModules/FindFLTK.cmake OpenSceneGraph-2.8.5_mod/CMakeModules/FindFLTK.cmake
--- OpenSceneGraph-2.8.5/CMakeModules/FindFLTK.cmake	2007-06-25 01:35:06.000000000 -0700
+++ OpenSceneGraph-2.8.5_mod/CMakeModules/FindFLTK.cmake	1969-12-31 16:00:00.000000000 -0800
@@ -1,60 +0,0 @@
-# Locate gdal
-# This module defines
-# FLTK_LIBRARY
-# FLTK_FOUND, if false, do not try to link to gdal 
-# FLTK_INCLUDE_DIR, where to find the headers
-#
-# $FLTK_DIR is an environment variable that would
-# correspond to the ./configure --prefix=$FLTK_DIR
-#
-# Created by Robert Osfield. 
-
-FIND_PATH(FLTK_INCLUDE_DIR Fl/Fl.H Fl/Fl.h
-    $ENV{FLTK_DIR}/include
-    $ENV{FLTK_DIR}
-    $ENV{OSGDIR}/include
-    $ENV{OSGDIR}
-    $ENV{OSG_ROOT}/include
-    ~/Library/Frameworks
-    /Library/Frameworks
-    /usr/local/include
-    /usr/include
-    /sw/include # Fink
-    /opt/local/include # DarwinPorts
-    /opt/csw/include # Blastwave
-    /opt/include
-    [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session\ Manager\\Environment;OSG_ROOT]/include
-    /usr/freeware/include
-)
-
-MACRO(FIND_FLTK_LIBRARY MYLIBRARY MYLIBRARYNAME)
-
-    FIND_LIBRARY(${MYLIBRARY}
-        NAMES ${MYLIBRARYNAME}
-        PATHS
-        $ENV{FLTK_DIR}/lib
-        $ENV{FLTK_DIR}
-        $ENV{OSGDIR}/lib
-        $ENV{OSGDIR}
-        $ENV{OSG_ROOT}/lib
-        ~/Library/Frameworks
-        /Library/Frameworks
-        /usr/local/lib
-        /usr/lib
-        /sw/lib
-        /opt/local/lib
-        /opt/csw/lib
-        /opt/lib
-        [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session\ Manager\\Environment;OSG_ROOT]/lib
-        /usr/freeware/lib64
-    )
-
-ENDMACRO(FIND_FLTK_LIBRARY LIBRARY LIBRARYNAME)
-
-FIND_FLTK_LIBRARY(FLTK_LIBRARY fltk)
-FIND_FLTK_LIBRARY(FLTK_GL_LIBRARY fltk_gl)
-
-SET(FLTK_FOUND "NO")
-IF(FLTK_LIBRARY AND FLTK_INCLUDE_DIR)
-    SET(FLTK_FOUND "YES")
-ENDIF(FLTK_LIBRARY AND FLTK_INCLUDE_DIR)
diff -ruN OpenSceneGraph-2.8.5/CMakeModules/MacroOptionalFindPackage.cmake OpenSceneGraph-2.8.5_mod/CMakeModules/MacroOptionalFindPackage.cmake
--- OpenSceneGraph-2.8.5/CMakeModules/MacroOptionalFindPackage.cmake	1969-12-31 16:00:00.000000000 -0800
+++ OpenSceneGraph-2.8.5_mod/CMakeModules/MacroOptionalFindPackage.cmake	2012-08-29 14:11:26.000000000 -0700
@@ -0,0 +1,12 @@
+macro (MACRO_OPTIONAL_FIND_PACKAGE _name )
+  option(WITH_${_name} "Search for ${_name} package" ON)
+  if (WITH_${_name})
+    find_package(${_name} ${ARGN})
+  else(WITH_${_name})
+    set(${_name}_FOUND)
+    set(${_name}_INCLUDE_DIR)
+    set(${_name}_INCLUDES)
+    set(${_name}_LIBRARY)
+    set(${_name}_LIBRARIES)
+  endif(WITH_${_name})
+endmacro (MACRO_OPTIONAL_FIND_PACKAGE)
\ No newline at end of file
diff -ruN OpenSceneGraph-2.8.5/CMakeModules/OsgMacroUtils.cmake OpenSceneGraph-2.8.5_mod/CMakeModules/OsgMacroUtils.cmake
--- OpenSceneGraph-2.8.5/CMakeModules/OsgMacroUtils.cmake	2011-04-06 18:58:09.000000000 -0700
+++ OpenSceneGraph-2.8.5_mod/CMakeModules/OsgMacroUtils.cmake	2012-08-29 14:12:54.000000000 -0700
@@ -371,9 +371,9 @@
         SETUP_EXE(${IS_COMMANDLINE_APP})
         
         IF(APPLE)
-            INSTALL(TARGETS ${TARGET_TARGETNAME} RUNTIME DESTINATION share/OpenSceneGraph/bin BUNDLE DESTINATION share/OpenSceneGraph/bin )            
+            INSTALL(TARGETS ${TARGET_TARGETNAME} RUNTIME DESTINATION bin BUNDLE DESTINATION bin )            
         ELSE(APPLE)
-            INSTALL(TARGETS ${TARGET_TARGETNAME} RUNTIME DESTINATION share/OpenSceneGraph/bin COMPONENT openscenegraph-examples )
+            INSTALL(TARGETS ${TARGET_TARGETNAME} RUNTIME DESTINATION bin COMPONENT openscenegraph-examples )
         ENDIF(APPLE)
 
 ENDMACRO(SETUP_EXAMPLE)
diff -ruN OpenSceneGraph-2.8.5/CMakeModules/OsgMacroUtils.cmake~ OpenSceneGraph-2.8.5_mod/CMakeModules/OsgMacroUtils.cmake~
--- OpenSceneGraph-2.8.5/CMakeModules/OsgMacroUtils.cmake~	1969-12-31 16:00:00.000000000 -0800
+++ OpenSceneGraph-2.8.5_mod/CMakeModules/OsgMacroUtils.cmake~	2012-08-29 14:01:24.000000000 -0700
@@ -0,0 +1,449 @@
+
+#######################################################################################################
+#  macro for linking libraries that come from Findxxxx commands, so there is a variable that contains the
+#  full path of the library name. in order to differentiate release and debug, this macro get the
+#  NAME of the variables, so the macro gets as arguments the target name and the following list of parameters
+#  is intended as a list of variable names each one containing  the path of the libraries to link to
+#  The existance of a varibale name with _DEBUG appended is tested and, in case it' s value is used
+#  for linking to when in debug mode 
+#  the content of this library for linking when in debugging
+#######################################################################################################
+
+# VALID_BUILDER_VERSION: used for replacing CMAKE_VERSION (available in v2.6.3 RC9) and VERSION_GREATER/VERSION_LESS (available in 2.6.2 RC4).
+# This can be replaced by "IF(${CMAKE_VERSION} VERSION_LESS "x.y.z")" from 2.6.4.
+SET(VALID_BUILDER_VERSION OFF)
+MACRO(BUILDER_VERSION_GREATER MAJOR_VER MINOR_VER PATCH_VER)
+    SET(VALID_BUILDER_VERSION OFF)
+    IF(CMAKE_MAJOR_VERSION GREATER ${MAJOR_VER})
+        SET(VALID_BUILDER_VERSION ON)
+    ELSEIF(CMAKE_MAJOR_VERSION EQUAL ${MAJOR_VER})
+        IF(CMAKE_MINOR_VERSION GREATER ${MINOR_VER})
+            SET(VALID_BUILDER_VERSION ON)
+        ELSEIF(CMAKE_MINOR_VERSION EQUAL ${MINOR_VER})
+            IF(CMAKE_PATCH_VERSION GREATER ${PATCH_VER})
+                SET(VALID_BUILDER_VERSION ON)
+            ENDIF(CMAKE_PATCH_VERSION GREATER ${PATCH_VER})
+        ENDIF()
+    ENDIF()
+ENDMACRO(BUILDER_VERSION_GREATER MAJOR_VER MINOR_VER PATCH_VER)
+
+# CMAKE24: if CMake version is <2.6.0.
+SET(CMAKE24 OFF)
+IF(${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} LESS 5)
+    SET(CMAKE24 ON)
+ENDIF(${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} LESS 5)
+
+# CMAKE_VERSION_TEST: Define whether "IF(${CMAKE_VERSION} VERSION_LESS "x.y.z")" can be used or not.
+BUILDER_VERSION_GREATER(2 6 3)
+SET(CMAKE_VERSION_TEST ${VALID_BUILDER_VERSION})        # >= 2.6.4
+
+SET(VALID_BUILDER_VERSION OFF)
+
+
+MACRO(LINK_WITH_VARIABLES TRGTNAME)
+    FOREACH(varname ${ARGN})
+        IF(${varname}_DEBUG)
+            TARGET_LINK_LIBRARIES(${TRGTNAME} optimized "${${varname}}" debug "${${varname}_DEBUG}")
+        ELSE(${varname}_DEBUG)
+            TARGET_LINK_LIBRARIES(${TRGTNAME} "${${varname}}" )
+        ENDIF(${varname}_DEBUG)
+    ENDFOREACH(varname)
+ENDMACRO(LINK_WITH_VARIABLES TRGTNAME)
+
+MACRO(LINK_INTERNAL TRGTNAME)
+    IF(NOT CMAKE24)
+        TARGET_LINK_LIBRARIES(${TRGTNAME} ${ARGN})
+    ELSE(NOT CMAKE24)
+        FOREACH(LINKLIB ${ARGN})
+            IF(MSVC AND OSG_MSVC_VERSIONED_DLL)
+                #when using versioned names, the .dll name differ from .lib name, there is a problem with that:
+                #CMake 2.4.7, at least seem to use PREFIX instead of IMPORT_PREFIX  for computing linkage info to use into projects,
+                # so we full path name to specify linkage, this prevent automatic inferencing of dependencies, so we add explicit depemdencies
+                #to library targets used
+                TARGET_LINK_LIBRARIES(${TRGTNAME} optimized "${OUTPUT_LIBDIR}/${LINKLIB}.lib" debug "${OUTPUT_LIBDIR}/${LINKLIB}${CMAKE_DEBUG_POSTFIX}.lib")
+                ADD_DEPENDENCIES(${TRGTNAME} ${LINKLIB})
+            ELSE(MSVC AND OSG_MSVC_VERSIONED_DLL)
+                TARGET_LINK_LIBRARIES(${TRGTNAME} optimized "${LINKLIB}" debug "${LINKLIB}${CMAKE_DEBUG_POSTFIX}")
+            ENDIF(MSVC AND OSG_MSVC_VERSIONED_DLL)
+        ENDFOREACH(LINKLIB)
+    ENDIF(NOT CMAKE24)
+ENDMACRO(LINK_INTERNAL TRGTNAME)
+
+MACRO(LINK_EXTERNAL TRGTNAME)
+    FOREACH(LINKLIB ${ARGN})
+        TARGET_LINK_LIBRARIES(${TRGTNAME} "${LINKLIB}" )
+    ENDFOREACH(LINKLIB)
+ENDMACRO(LINK_EXTERNAL TRGTNAME)
+
+
+#######################################################################################################
+#  macro for common setup of core libraries: it links OPENGL_LIBRARIES in undifferentiated mode
+#######################################################################################################
+
+MACRO(LINK_CORELIB_DEFAULT CORELIB_NAME)
+    LINK_EXTERNAL(${CORELIB_NAME} ${OPENGL_LIBRARIES}) 
+    LINK_WITH_VARIABLES(${CORELIB_NAME} OPENTHREADS_LIBRARY)
+    IF(OPENSCENEGRAPH_SONAMES)
+      SET_TARGET_PROPERTIES(${CORELIB_NAME} PROPERTIES VERSION ${OPENSCENEGRAPH_VERSION} SOVERSION ${OPENSCENEGRAPH_SOVERSION})
+    ENDIF(OPENSCENEGRAPH_SONAMES)
+ENDMACRO(LINK_CORELIB_DEFAULT CORELIB_NAME)
+
+
+#######################################################################################################
+#  macro for common setup of plugins, examples and applications it expect some variables to be set:
+#  either within the local CMakeLists or higher in hierarchy
+#  TARGET_NAME is the name of the folder and of the actually .exe or .so or .dll
+#  TARGET_TARGETNAME  is the name of the target , this get buit out of a prefix, if present and TARGET_TARGETNAME
+#  TARGET_SRC  are the sources of the target
+#  TARGET_H are the eventual headers of the target
+#  TARGET_LIBRARIES are the libraries to link to that are internal to the project and have d suffix for debug
+#  TARGET_EXTERNAL_LIBRARIES are external libraries and are not differentiated with d suffix
+#  TARGET_LABEL is the label IDE should show up for targets
+##########################################################################################################
+
+MACRO(SETUP_LINK_LIBRARIES)
+    ######################################################################
+    #
+    # This set up the libraries to link to, it assumes there are two variable: one common for a group of examples or plagins
+    # kept in the variable TARGET_COMMON_LIBRARIES and an example or plugin specific kept in TARGET_ADDED_LIBRARIES 
+    # they are combined in a single list checked for unicity 
+    # the suffix ${CMAKE_DEBUG_POSTFIX} is used for differentiating optimized and debug
+    #
+    # a second variable TARGET_EXTERNAL_LIBRARIES hold the list of  libraries not differentiated between debug and optimized 
+    ##################################################################################
+    SET(TARGET_LIBRARIES ${TARGET_COMMON_LIBRARIES})
+
+    FOREACH(LINKLIB ${TARGET_ADDED_LIBRARIES})
+      SET(TO_INSERT TRUE)
+      FOREACH (value ${TARGET_COMMON_LIBRARIES})
+            IF (${value} STREQUAL ${LINKLIB})
+                  SET(TO_INSERT FALSE)
+            ENDIF (${value} STREQUAL ${LINKLIB})
+        ENDFOREACH (value ${TARGET_COMMON_LIBRARIES})
+      IF(TO_INSERT)
+          LIST(APPEND TARGET_LIBRARIES ${LINKLIB})
+      ENDIF(TO_INSERT)
+    ENDFOREACH(LINKLIB)
+
+#    FOREACH(LINKLIB ${TARGET_LIBRARIES})
+#            TARGET_LINK_LIBRARIES(${TARGET_TARGETNAME} optimized ${LINKLIB} debug "${LINKLIB}${CMAKE_DEBUG_POSTFIX}")
+#    ENDFOREACH(LINKLIB)
+        LINK_INTERNAL(${TARGET_TARGETNAME} ${TARGET_LIBRARIES})
+    FOREACH(LINKLIB ${TARGET_EXTERNAL_LIBRARIES})
+            TARGET_LINK_LIBRARIES(${TARGET_TARGETNAME} ${LINKLIB})
+    ENDFOREACH(LINKLIB)
+        IF(TARGET_LIBRARIES_VARS)
+            LINK_WITH_VARIABLES(${TARGET_TARGETNAME} ${TARGET_LIBRARIES_VARS})
+        ENDIF(TARGET_LIBRARIES_VARS)
+    IF(MSVC  AND OSG_MSVC_VERSIONED_DLL)
+        #when using full path name to specify linkage, it seems that already linked libs must be specified
+            LINK_EXTERNAL(${TARGET_TARGETNAME} ${OPENGL_LIBRARIES}) 
+    ENDIF(MSVC AND OSG_MSVC_VERSIONED_DLL)
+
+ENDMACRO(SETUP_LINK_LIBRARIES)
+
+############################################################################################
+# this is the common set of command for all the plugins
+#
+
+# Sets the output directory property for CMake >= 2.6.0, giving an output path RELATIVE to default one
+MACRO(SET_OUTPUT_DIR_PROPERTY_260 TARGET_TARGETNAME RELATIVE_OUTDIR)
+    BUILDER_VERSION_GREATER(2 8 0)
+    IF(NOT VALID_BUILDER_VERSION)
+        # If CMake <= 2.8.0 (Testing CMAKE_VERSION is possible in >= 2.6.4)
+        IF(MSVC_IDE)
+            # Using the "prefix" hack
+            SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES PREFIX "../${RELATIVE_OUTDIR}/")
+        ELSE(MSVC_IDE)
+            SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES PREFIX "${RELATIVE_OUTDIR}/")
+        ENDIF(MSVC_IDE)
+    ELSE(NOT VALID_BUILDER_VERSION)
+        # Using the output directory properties
+
+        # Global properties (All generators but VS & Xcode)
+        FILE(TO_CMAKE_PATH TMPVAR "CMAKE_ARCHIVE_OUTPUT_DIRECTORY/${RELATIVE_OUTDIR}")
+        SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${TMPVAR}")
+        FILE(TO_CMAKE_PATH TMPVAR "CMAKE_RUNTIME_OUTPUT_DIRECTORY/${RELATIVE_OUTDIR}")
+        SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${TMPVAR}")
+        FILE(TO_CMAKE_PATH TMPVAR "CMAKE_LIBRARY_OUTPUT_DIRECTORY/${RELATIVE_OUTDIR}")
+        SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${TMPVAR}")
+
+        # Per-configuration property (VS, Xcode)
+        FOREACH(CONF ${CMAKE_CONFIGURATION_TYPES})        # For each configuration (Debug, Release, MinSizeRel... and/or anything the user chooses)
+            STRING(TOUPPER "${CONF}" CONF)                # Go uppercase (DEBUG, RELEASE...)
+
+            # We use "FILE(TO_CMAKE_PATH", to create nice looking paths
+            FILE(TO_CMAKE_PATH "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONF}}/${RELATIVE_OUTDIR}" TMPVAR)
+            SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES "ARCHIVE_OUTPUT_DIRECTORY_${CONF}" "${TMPVAR}")
+            FILE(TO_CMAKE_PATH "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONF}}/${RELATIVE_OUTDIR}" TMPVAR)
+            SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES "RUNTIME_OUTPUT_DIRECTORY_${CONF}" "${TMPVAR}")
+            FILE(TO_CMAKE_PATH "${CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONF}}/${RELATIVE_OUTDIR}" TMPVAR)
+            SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES "LIBRARY_OUTPUT_DIRECTORY_${CONF}" "${TMPVAR}")
+        ENDFOREACH(CONF ${CMAKE_CONFIGURATION_TYPES})
+    ENDIF(NOT VALID_BUILDER_VERSION)
+ENDMACRO(SET_OUTPUT_DIR_PROPERTY_260 TARGET_TARGETNAME RELATIVE_OUTDIR)
+
+
+MACRO(SETUP_PLUGIN PLUGIN_NAME)
+
+    SET(TARGET_NAME ${PLUGIN_NAME} )
+
+    #MESSAGE("in -->SETUP_PLUGIN<-- ${TARGET_NAME}-->${TARGET_SRC} <--> ${TARGET_H}<--")
+
+    ## we have set up the target label and targetname by taking into account global prfix (osgdb_)
+
+    IF(NOT TARGET_TARGETNAME)
+            SET(TARGET_TARGETNAME "${TARGET_DEFAULT_PREFIX}${TARGET_NAME}")
+    ENDIF(NOT TARGET_TARGETNAME)
+    IF(NOT TARGET_LABEL)
+            SET(TARGET_LABEL "${TARGET_DEFAULT_LABEL_PREFIX} ${TARGET_NAME}")
+    ENDIF(NOT TARGET_LABEL)
+
+    ## plugins gets put in libopenscenegraph by default
+    IF(${ARGC} GREATER 1)
+      SET(PACKAGE_COMPONENT libopenscenegraph-${ARGV1})
+    ELSE(${ARGC} GREATER 1)
+      SET(PACKAGE_COMPONENT libopenscenegraph)
+    ENDIF(${ARGC} GREATER 1)
+    
+    # here we use the command to generate the library    
+
+    IF   (DYNAMIC_OPENSCENEGRAPH)
+        ADD_LIBRARY(${TARGET_TARGETNAME} MODULE ${TARGET_SRC} ${TARGET_H})
+    ELSE (DYNAMIC_OPENSCENEGRAPH)
+        ADD_LIBRARY(${TARGET_TARGETNAME} STATIC ${TARGET_SRC} ${TARGET_H})
+    ENDIF(DYNAMIC_OPENSCENEGRAPH)
+    
+    #not sure if needed, but for plugins only Msvc need the d suffix
+    IF(NOT MSVC)
+        IF(NOT UNIX)
+            SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES DEBUG_POSTFIX "")
+        ENDIF(NOT UNIX)
+    ELSE(NOT MSVC)
+        IF(NOT CMAKE24)
+            SET_OUTPUT_DIR_PROPERTY_260(${TARGET_TARGETNAME} "${OSG_PLUGINS}")        # Sets the ouput to be /osgPlugin-X.X.X ; also ensures the /Debug /Release are removed
+        ELSE(NOT CMAKE24)
+
+            IF(OSG_MSVC_VERSIONED_DLL) 
+
+                #this is a hack... the build place is set to lib/<debug or release> by LIBARARY_OUTPUT_PATH equal to OUTPUT_LIBDIR
+                #the .lib will be crated in ../ so going straight in lib by the IMPORT_PREFIX property
+                #because we want dll placed in OUTPUT_BINDIR ie the bin folder sibling of lib, we can use ../../bin to go there,
+                #it is hardcoded, we should compute OUTPUT_BINDIR position relative to OUTPUT_LIBDIR ... to be implemented
+                #changing bin to something else breaks this hack
+                #the dll are placed in bin/${OSG_PLUGINS} 
+
+                IF(NOT MSVC_IDE)
+                    SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES PREFIX "../bin/${OSG_PLUGINS}/")                     
+                ELSE(NOT MSVC_IDE)
+                    SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES PREFIX "../../bin/${OSG_PLUGINS}/" IMPORT_PREFIX "../")
+                ENDIF(NOT MSVC_IDE)
+
+            ELSE(OSG_MSVC_VERSIONED_DLL)
+
+                #in standard mode (unversioned) the .lib and .dll are placed in lib/<debug or release>/${OSG_PLUGINS}.
+                #here the PREFIX property has been used, the same result would be accomplidhe by prepending ${OSG_PLUGINS}/ to OUTPUT_NAME target property
+
+                SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES PREFIX "${OSG_PLUGINS}/")
+            ENDIF(OSG_MSVC_VERSIONED_DLL)
+
+        ENDIF(NOT CMAKE24)
+    ENDIF(NOT MSVC)
+
+    SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES PROJECT_LABEL "${TARGET_LABEL}")
+ 
+    SETUP_LINK_LIBRARIES()
+
+#the installation path are differentiated for win32 that install in bib versus other architecture that install in lib${LIB_POSTFIX}/${OSG_PLUGINS}
+    IF(WIN32)
+        INSTALL(TARGETS ${TARGET_TARGETNAME} 
+            RUNTIME DESTINATION bin COMPONENT ${PACKAGE_COMPONENT}
+            ARCHIVE DESTINATION lib/${OSG_PLUGINS} COMPONENT libopenscenegraph-dev
+            LIBRARY DESTINATION bin/${OSG_PLUGINS} COMPONENT ${PACKAGE_COMPONENT})
+    ELSE(WIN32)
+        INSTALL(TARGETS ${TARGET_TARGETNAME}
+            RUNTIME DESTINATION bin COMPONENT ${PACKAGE_COMPONENT}
+            ARCHIVE DESTINATION lib${LIB_POSTFIX}/${OSG_PLUGINS} COMPONENT libopenscenegraph-dev
+            LIBRARY DESTINATION lib${LIB_POSTFIX}/${OSG_PLUGINS} COMPONENT ${PACKAGE_COMPONENT})
+    ENDIF(WIN32)
+ENDMACRO(SETUP_PLUGIN)
+
+
+#################################################################################################################
+# this is the macro for example and application setup
+###########################################################
+
+MACRO(SETUP_EXE IS_COMMANDLINE_APP)
+    #MESSAGE("in -->SETUP_EXE<-- ${TARGET_NAME}-->${TARGET_SRC} <--> ${TARGET_H}<--")
+    IF(NOT TARGET_TARGETNAME)
+            SET(TARGET_TARGETNAME "${TARGET_DEFAULT_PREFIX}${TARGET_NAME}")
+    ENDIF(NOT TARGET_TARGETNAME)
+    IF(NOT TARGET_LABEL)
+            SET(TARGET_LABEL "${TARGET_DEFAULT_LABEL_PREFIX} ${TARGET_NAME}")
+    ENDIF(NOT TARGET_LABEL)
+
+    IF(${IS_COMMANDLINE_APP})
+    
+        ADD_EXECUTABLE(${TARGET_TARGETNAME} ${TARGET_SRC} ${TARGET_H})
+        
+    ELSE(${IS_COMMANDLINE_APP})
+    
+        IF(APPLE)
+            # SET(MACOSX_BUNDLE_LONG_VERSION_STRING "${OPENSCENEGRAPH_MAJOR_VERSION}.${OPENSCENEGRAPH_MINOR_VERSION}.${OPENSCENEGRAPH_PATCH_VERSION}")
+            # Short Version is the "marketing version". It is the version
+            # the user sees in an information panel.
+            SET(MACOSX_BUNDLE_SHORT_VERSION_STRING "${OPENSCENEGRAPH_MAJOR_VERSION}.${OPENSCENEGRAPH_MINOR_VERSION}.${OPENSCENEGRAPH_PATCH_VERSION}")
+            # Bundle version is the version the OS looks at.
+            SET(MACOSX_BUNDLE_BUNDLE_VERSION "${OPENSCENEGRAPH_MAJOR_VERSION}.${OPENSCENEGRAPH_MINOR_VERSION}.${OPENSCENEGRAPH_PATCH_VERSION}")
+            SET(MACOSX_BUNDLE_GUI_IDENTIFIER "org.openscenegraph.${TARGET_TARGETNAME}" )
+            SET(MACOSX_BUNDLE_BUNDLE_NAME "${TARGET_NAME}" )
+            # SET(MACOSX_BUNDLE_ICON_FILE "myicon.icns")
+            # SET(MACOSX_BUNDLE_COPYRIGHT "")
+            # SET(MACOSX_BUNDLE_INFO_STRING "Info string, localized?")
+        ENDIF(APPLE)
+
+        IF(WIN32)
+            IF (REQUIRE_WINMAIN_FLAG)
+                SET(PLATFORM_SPECIFIC_CONTROL WIN32)
+            ENDIF(REQUIRE_WINMAIN_FLAG)
+        ENDIF(WIN32)
+
+        IF(APPLE)
+            IF(OSG_BUILD_APPLICATION_BUNDLES)
+                SET(PLATFORM_SPECIFIC_CONTROL MACOSX_BUNDLE)
+            ENDIF(OSG_BUILD_APPLICATION_BUNDLES)
+        ENDIF(APPLE)
+
+        ADD_EXECUTABLE(${TARGET_TARGETNAME} ${PLATFORM_SPECIFIC_CONTROL} ${TARGET_SRC} ${TARGET_H})
+        
+    ENDIF(${IS_COMMANDLINE_APP})
+
+    SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES PROJECT_LABEL "${TARGET_LABEL}")
+    SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
+    SET_TARGET_PROPERTIES(${TARGET_TARGETNAME} PROPERTIES OUTPUT_NAME ${TARGET_NAME})
+
+    IF(MSVC_IDE AND OSG_MSVC_VERSIONED_DLL)
+        SET_OUTPUT_DIR_PROPERTY_260(${TARGET_TARGETNAME} "")        # Ensure the /Debug /Release are removed
+    ENDIF(MSVC_IDE AND OSG_MSVC_VERSIONED_DLL)
+
+    SETUP_LINK_LIBRARIES()    
+
+ENDMACRO(SETUP_EXE)
+
+# Takes optional second argument (is_commandline_app?) in ARGV1
+MACRO(SETUP_APPLICATION APPLICATION_NAME)
+
+        SET(TARGET_NAME ${APPLICATION_NAME} )
+
+        IF(${ARGC} GREATER 1)
+            SET(IS_COMMANDLINE_APP ${ARGV1})
+        ELSE(${ARGC} GREATER 1)
+            SET(IS_COMMANDLINE_APP 0)
+        ENDIF(${ARGC} GREATER 1)
+            
+        SETUP_EXE(${IS_COMMANDLINE_APP})
+        
+        IF(APPLE)
+            INSTALL(TARGETS ${TARGET_TARGETNAME} RUNTIME DESTINATION bin BUNDLE DESTINATION bin)
+        ELSE(APPLE)
+            INSTALL(TARGETS ${TARGET_TARGETNAME} RUNTIME DESTINATION bin COMPONENT openscenegraph  )
+        ENDIF(APPLE)
+
+ENDMACRO(SETUP_APPLICATION)
+
+MACRO(SETUP_COMMANDLINE_APPLICATION APPLICATION_NAME)
+
+    SETUP_APPLICATION(${APPLICATION_NAME} 1)
+
+ENDMACRO(SETUP_COMMANDLINE_APPLICATION)
+
+# Takes optional second argument (is_commandline_app?) in ARGV1
+MACRO(SETUP_EXAMPLE EXAMPLE_NAME)
+
+        SET(TARGET_NAME ${EXAMPLE_NAME} )
+
+        IF(${ARGC} GREATER 1)
+            SET(IS_COMMANDLINE_APP ${ARGV1})
+        ELSE(${ARGC} GREATER 1)
+            SET(IS_COMMANDLINE_APP 0)
+        ENDIF(${ARGC} GREATER 1)
+            
+        SETUP_EXE(${IS_COMMANDLINE_APP})
+        
+        IF(APPLE)
+            INSTALL(TARGETS ${TARGET_TARGETNAME} RUNTIME DESTINATION share/OpenSceneGraph/bin BUNDLE DESTINATION share/OpenSceneGraph/bin )            
+        ELSE(APPLE)
+            INSTALL(TARGETS ${TARGET_TARGETNAME} RUNTIME DESTINATION share/OpenSceneGraph/bin COMPONENT openscenegraph-examples )
+        ENDIF(APPLE)
+
+ENDMACRO(SETUP_EXAMPLE)
+
+
+MACRO(SETUP_COMMANDLINE_EXAMPLE EXAMPLE_NAME)
+
+    SETUP_EXAMPLE(${EXAMPLE_NAME} 1)
+
+ENDMACRO(SETUP_COMMANDLINE_EXAMPLE)
+
+# Takes two optional arguments -- osg prefix and osg version
+MACRO(HANDLE_MSVC_DLL)
+        #this is a hack... the build place is set to lib/<debug or release> by LIBARARY_OUTPUT_PATH equal to OUTPUT_LIBDIR
+        #the .lib will be crated in ../ so going straight in lib by the IMPORT_PREFIX property
+        #because we want dll placed in OUTPUT_BINDIR ie the bin folder sibling of lib, we can use ../../bin to go there,
+        #it is hardcoded, we should compute OUTPUT_BINDIR position relative to OUTPUT_LIBDIR ... to be implemented
+        #changing bin to something else breaks this hack
+        #the dll are versioned by prefixing the name with osg${OPENSCENEGRAPH_SOVERSION}-
+
+        # LIB_PREFIX: use "osg" by default, else whatever we've been given.
+        IF(${ARGC} GREATER 0)
+                SET(LIB_PREFIX ${ARGV0})
+        ELSE(${ARGC} GREATER 0)
+                SET(LIB_PREFIX osg)
+        ENDIF(${ARGC} GREATER 0)
+
+        # LIB_SOVERSION: use OSG's soversion by default, else whatever we've been given
+        IF(${ARGC} GREATER 1)
+                SET(LIB_SOVERSION ${ARGV1})
+        ELSE(${ARGC} GREATER 1)
+                SET(LIB_SOVERSION ${OPENSCENEGRAPH_SOVERSION})
+        ENDIF(${ARGC} GREATER 1)
+
+        SET_OUTPUT_DIR_PROPERTY_260(${LIB_NAME} "")        # Ensure the /Debug /Release are removed
+        IF(NOT MSVC_IDE) 
+            IF (NOT CMAKE24)
+                BUILDER_VERSION_GREATER(2 8 0)
+                IF(NOT VALID_BUILDER_VERSION)
+                    # If CMake < 2.8.1
+                    SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES PREFIX "../bin/${LIB_PREFIX}${LIB_SOVERSION}-" IMPORT_PREFIX "../")
+                ELSE(NOT VALID_BUILDER_VERSION)
+                    SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES PREFIX "${LIB_PREFIX}${LIB_SOVERSION}-")
+                ENDIF(NOT VALID_BUILDER_VERSION)
+            ELSE (NOT CMAKE24)
+                SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES PREFIX "../bin/${LIB_PREFIX}${LIB_SOVERSION}-" IMPORT_PREFIX "../")
+                SET(NEW_LIB_NAME "${OUTPUT_BINDIR}/${LIB_PREFIX}${LIB_SOVERSION}-${LIB_NAME}")
+                ADD_CUSTOM_COMMAND(
+                    TARGET ${LIB_NAME}
+                    POST_BUILD
+                    COMMAND ${CMAKE_COMMAND} -E copy "${NEW_LIB_NAME}.lib"  "${OUTPUT_LIBDIR}/${LIB_NAME}.lib"
+                    COMMAND ${CMAKE_COMMAND} -E copy "${NEW_LIB_NAME}.exp"  "${OUTPUT_LIBDIR}/${LIB_NAME}.exp"
+                    COMMAND ${CMAKE_COMMAND} -E remove "${NEW_LIB_NAME}.lib"
+                    COMMAND ${CMAKE_COMMAND} -E remove "${NEW_LIB_NAME}.exp"
+                    )
+            ENDIF (NOT CMAKE24)
+        ELSE(NOT MSVC_IDE)
+            IF (NOT CMAKE24)
+                BUILDER_VERSION_GREATER(2 8 0)
+                IF(NOT VALID_BUILDER_VERSION)
+                    # If CMake < 2.8.1
+                    SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES PREFIX "../../bin/${LIB_PREFIX}${LIB_SOVERSION}-" IMPORT_PREFIX "../")
+                ELSE(NOT VALID_BUILDER_VERSION)
+                    SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES PREFIX "${LIB_PREFIX}${LIB_SOVERSION}-")
+                ENDIF(NOT VALID_BUILDER_VERSION)
+            ELSE (NOT CMAKE24)
+                SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES PREFIX "../../bin/${LIB_PREFIX}${LIB_SOVERSION}-" IMPORT_PREFIX "../")
+            ENDIF (NOT CMAKE24)
+        ENDIF(NOT MSVC_IDE) 
+
+#     SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES PREFIX "../../bin/osg${OPENSCENEGRAPH_SOVERSION}-")
+#     SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES IMPORT_PREFIX "../")
+ENDMACRO(HANDLE_MSVC_DLL)
diff -ruN OpenSceneGraph-2.8.5/examples/osgviewerFLTK/CMakeLists.txt OpenSceneGraph-2.8.5_mod/examples/osgviewerFLTK/CMakeLists.txt
--- OpenSceneGraph-2.8.5/examples/osgviewerFLTK/CMakeLists.txt	2007-06-25 01:35:06.000000000 -0700
+++ OpenSceneGraph-2.8.5_mod/examples/osgviewerFLTK/CMakeLists.txt	2012-08-29 14:13:26.000000000 -0700
@@ -1,6 +1,6 @@
 SET(TARGET_SRC osgviewerFLTK.cpp )
 
-SET(TARGET_EXTERNAL_LIBRARIES ${FLTK_LIBRARY} ${FLTK_GL_LIBRARY})
+SET(TARGET_EXTERNAL_LIBRARIES ${FLTK_BASE_LIBRARY} ${FLTK_GL_LIBRARY})
 
 INCLUDE_DIRECTORIES(${FLTK_INCLUDE_DIR} )
 
